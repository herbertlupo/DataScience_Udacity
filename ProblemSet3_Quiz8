import numpy as np
import pandas
import scipy
import statsmodels.api as smf

"""
In this optional exercise, you should complete the function called 
predictions(turnstile_weather). This function takes in our pandas 
turnstile weather dataframe, and returns a set of predicted ridership values,
based on the other information in the dataframe.  
In exercise 3.5 we used Gradient Descent in order to compute the coefficients
theta used for the ridership prediction. Here you should attempt to implement 
another way of computing the coeffcients theta. You may also try using a reference implementation such as: 
http://statsmodels.sourceforge.net/devel/generated/statsmodels.regression.linear_model.OLS.html
Note that you may also experiment with polynomial terms as part of the input variables.  
The following links might be useful: 
http://en.wikipedia.org/wiki/Ordinary_least_squares
http://en.wikipedia.org/w/index.php?title=Linear_least_squares_(mathematics)
http://en.wikipedia.org/wiki/Polynomial_regression
This is your playground. Go wild!
How does your choice of linear regression compare to linear regression
with gradient descent computed in Exercise 3.5?
You can look at the information contained in the turnstile_weather dataframe below:
https://www.dropbox.com/s/meyki2wl9xfa7yk/turnstile_data_master_with_weather.csv
Note: due to the memory and CPU limitation of our amazon EC2 instance, we will
give you a random subset (~15%) of the data contained in turnstile_data_master_with_weather.csv
If you receive a "server has encountered an error" message, that means you are hitting 
the 30 second limit that's placed on running your program. See if you can optimize your code so it
runs faster.
"""




def normalize_features(array):
   array_normalized = (array-array.mean())/array.std()
   mu = array.mean()
   sigma = array.std()

   return array_normalized, mu, sigma
def predictions(weather_turnstile):
    
    aa=weather_turnstile.copy()
    # adicionar recurso day-to-week com solucao alternativa no erro de indexacao
    aa['Day_of_week']=pandas.DatetimeIndex(aa['DATEn']).weekday
    dataframe = aa
    dataframe.dropna()
#  conjunto de caracteristicas
    features_set = dataframe[['Hour', 'meantempi', 'rain', 'fog','meanwindspdi','precipi','Day_of_week']]
    features_set.head()
# alvo
    values = dataframe['ENTRIESn_hourly']
    m = len(values)
    features = features_set.copy()
    
# unidade ficticia
    dummy_units = pandas.get_dummies(dataframe['UNIT'], prefix='unit')
    features = features.join(dummy_units)
# adicionando recurso ficticio day-to-week
    dummy_units = pandas.get_dummies(dataframe['Day_of_week'], prefix='dow')
    features = features.join(dummy_units)
# adicionando recurso ficticio hora
    dummy_units = pandas.get_dummies(dataframe['Hour'], prefix='hour')
    features = features.join(dummy_units)
    features['ones'] = np.ones(m)
# normalizacao
    features, mu, sigma = normalize_features(features)
    features['ones'] = np.ones(m)
# alvos
    values = dataframe['ENTRIESn_hourly']
# OLS
    model =  smf.OLS(values,features)
    results = model.fit()
    prediction = np.dot(features , results.params)
 
     
    return prediction
